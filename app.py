from flask import Flask, request, jsonify, render_template
import json, os, time, threading, random, requests
from selenium.webdriver.common.keys import Keys
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from threading import Lock

app = Flask(__name__)

# paths / files
driver_path = r"msedgedriver.exe"
ACCOUNTS_FILE = "accounts.json"
WORKFLOW_FILE = "workflow.json"
LOG_FILE = "logs.txt"

# lock cho ghi log (tr√°nh race condition)
_log_lock = Lock()

# ƒë·∫£m b·∫£o file t·ªìn t·∫°i
for file in [ACCOUNTS_FILE, WORKFLOW_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)


def log_action(message):
    ts = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    line = f"{ts} {message}\n"
    # in ra console
    print(line.strip())
    # ghi file an to√†n
    with _log_lock:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(line)
def load_accounts():
    if not os.path.exists(ACCOUNTS_FILE):
        return []
    with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

def save_accounts(data):
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# ---------- proxy detection ----------
def proxy_works(proxy):
    """
    Th·ª≠ detect proxy: tr·∫£ v·ªÅ 'http' n·∫øu HTTP CONNECT ho·∫°t ƒë·ªông,
    tr·∫£ v·ªÅ 'socks5' n·∫øu SOCKS5 ho·∫°t ƒë·ªông,
    tr·∫£ v·ªÅ None n·∫øu c·∫£ 2 ƒë·ªÅu fail.
    """
    proxy = proxy.strip()
    # th·ª≠ HTTP CONNECT
    try:
        proxies = {"http": f"http://{proxy}", "https": f"http://{proxy}"}
        r = requests.get("https://httpbin.org/ip", proxies=proxies, timeout=6)
        if r.status_code == 200:
            ip = r.json().get("origin") if r.headers.get("Content-Type", "").startswith("application/json") else None
            log_action(f"üü¢ Proxy {proxy} ho·∫°t ƒë·ªông (HTTP CONNECT).")
            return "http"
        else:
            log_action(f"üî¥ Proxy {proxy} (HTTP) tr·∫£ m√£ {r.status_code}")
    except Exception as e:
        log_action(f"üî¥ Proxy {proxy} (HTTP) l·ªói: {e}")

    # th·ª≠ SOCKS5
    try:
        proxies = {"http": f"socks5h://{proxy}", "https": f"socks5h://{proxy}"}
        r = requests.get("https://httpbin.org/ip", proxies=proxies, timeout=6)
        if r.status_code == 200:
            ip = r.json().get("origin") if r.headers.get("Content-Type", "").startswith("application/json") else None
            log_action(f"üü¢ Proxy {proxy} ho·∫°t ƒë·ªông (SOCKS5).")
            return "socks5"
        else:
            log_action(f"üî¥ Proxy {proxy} (SOCKS5) tr·∫£ m√£ {r.status_code}")
    except Exception as e:
        log_action(f"üî¥ Proxy {proxy} (SOCKS5) l·ªói: {e}")

    log_action(f"‚ùå Proxy {proxy} kh√¥ng kh·∫£ d·ª•ng (HTTP/SOCKS5).")
    return None


def open_edge_window_new_instance(url, proxy=None):
    """
    M·ªü Edge WebDriver; n·∫øu proxy c√≥ th√¨ detect scheme (http | socks5)
    v√† c·∫•u h√¨nh ƒë√∫ng --proxy-server. Sau khi m·ªü, ki·ªÉm tra nhanh b·∫±ng httpbin.
    N·∫øu proxy kh√¥ng cho driver ra ngo√†i, fallback m·ªü driver kh√¥ng proxy.
    """
    def _build_driver(proxy_arg=None):
        service = Service(driver_path)
        options = EdgeOptions()
        options.add_argument("--start-maximized")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option("useAutomationExtension", False)
        options.add_argument("--disable-blink-features=AutomationControlled")
        if proxy_arg:
            options.add_argument(f"--proxy-server={proxy_arg}")
            log_action(f"üåê C·∫•u h√¨nh proxy cho driver: {proxy_arg}")
        try:
            driver = webdriver.Edge(service=service, options=options)
        except Exception as e:
            log_action(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Edge WebDriver: {e}")
            return None

        # CDP tweak gi·∫£m kh·∫£ nƒÉng detect
        try:
            driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
                "source": """
                    Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                    window.navigator.chrome = { runtime: {} };
                    Object.defineProperty(navigator, 'plugins', {get: () => [1,2,3,4]});
                    Object.defineProperty(navigator, 'languages', {get: () => ['en-US','en']});
                """
            })
        except Exception as e:
            log_action(f"‚ö†Ô∏è CDP tweak kh√¥ng ch·∫°y: {e}")

        return driver

    try:
        proxy_arg = None
        detected = None
        if proxy:
            detected = proxy_works(proxy)
            if detected == "http":
                proxy_arg = f"http://{proxy}"
            elif detected == "socks5":
                proxy_arg = f"socks5://{proxy}"
            else:
                # kh√¥ng detect ƒë∆∞·ª£c -> log v√† s·∫Ω m·ªü driver kh√¥ng proxy
                log_action(f"‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c scheme proxy {proxy}; s·∫Ω m·ªü driver kh√¥ng proxy.")
                proxy_arg = None

        # 1) M·ªü driver (v·ªõi proxy_arg n·∫øu c√≥)
        driver = _build_driver(proxy_arg)
        if not driver:
            return None

        driver.set_page_load_timeout(20)

        # 2) M·ªü target trang
        try:
            driver.get(url)
            log_action(f"üåç M·ªü trang: {url}")
        except Exception as e:
            log_action(f"‚ö†Ô∏è L·ªói khi load target {url}: {e}")

        # 3) N·∫øu d√πng proxy -> ki·ªÉm tra driver th·ª±c s·ª± ra ngo√†i b·∫±ng httpbin
        if proxy_arg:
            try:
                driver.get("https://httpbin.org/ip")
                time.sleep(1)
                ps = driver.page_source.lower()
                if "origin" in ps or "origin" in driver.find_element(By.TAG_NAME, "body").text.lower():
                    log_action("‚úÖ Driver th√¥ng b√°o ƒë√£ ra ngo√†i (httpbin check).")
                else:
                    log_action("‚ö†Ô∏è httpbin kh√¥ng tr·∫£ origin trong page_source -> proxy c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông cho driver.")
                    # fallback: restart without proxy
                    try:
                        fname = f"proxy_fail_{proxy.replace(':','_')}_{int(time.time())}.png"
                        driver.save_screenshot(fname)
                        log_action(f"üñºÔ∏è ƒê√£ l∆∞u screenshot l·ªói: {fname}")
                    except Exception:
                        pass
                    try:
                        driver.quit()
                    except Exception:
                        pass
                    log_action("üîÅ Fallback: m·ªü l·∫°i driver KH√îNG d√πng proxy.")
                    driver = _build_driver(None)
                    if driver:
                        try:
                            driver.get(url)
                        except Exception as e:
                            log_action(f"‚ö†Ô∏è L·ªói khi m·ªü l·∫°i trang sau fallback: {e}")
            except Exception as e:
                log_action(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra httpbin b·∫±ng driver: {e}")
                # fallback to no-proxy
                try:
                    driver.quit()
                except:
                    pass
                log_action("üîÅ Fallback: m·ªü l·∫°i driver kh√¥ng d√πng proxy.")
                driver = _build_driver(None)
                if driver:
                    try:
                        driver.get(url)
                    except Exception as e:
                        log_action(f"‚ö†Ô∏è L·ªói khi m·ªü trang sau fallback: {e}")

        return driver

    except Exception as e:
        log_action(f"‚ùå L·ªói m·ªü Edge WebDriver: {e}")
        return None


# ---------- helper: human typing ----------
def human_type(driver, element, text, min_delay=0.06, max_delay=0.18):
    """
    G√µ t·ª´ng k√Ω t·ª± v·ªõi delay ng·∫´u nhi√™n ƒë·ªÉ gi·ªëng ng∆∞·ªùi th·∫≠t.
    Sau khi g√µ xong, ph√°t event 'input' ƒë·ªÉ JS tr√™n trang nh·∫≠n.
    """
    try:
        element.click()
    except Exception:
        pass

    for ch in text:
        element.send_keys(ch)
        time.sleep(random.uniform(min_delay, max_delay))

    # dispatch input event ƒë·ªÉ ch·∫Øc ch·∫Øn JS b·∫Øt ƒë∆∞·ª£c change
    try:
        driver.execute_script(
            "var el = arguments[0]; el.dispatchEvent(new Event('input', {bubbles: true}));",
            element,
        )
    except Exception:
        pass


def substitute_vars(text, acc):
    if not isinstance(text, str):
        return text
    for k, v in acc.items():
        text = text.replace(f"{{{{selected_account.{k}}}}}", str(v))
    return text


def load_workflow():
    try:
        with open(WORKFLOW_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log_action(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc workflow.json: {e}")
        return []


def run_workflow_for_account(acc):
    """Ch·∫°y workflow cho 1 t√†i kho·∫£n"""
    workflow = load_workflow()
    if not workflow:
        log_action("‚ùå Kh√¥ng t√¨m th·∫•y workflow.json ho·∫∑c r·ªóng!")
        return

    username = acc.get("username")
    log_action(f"\n--- üî∏ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t√†i kho·∫£n {username} ---")

    # ‚úÖ Ki·ªÉm tra proxy tr∆∞·ªõc khi ch·∫°y (c√≥ fallback IP th·∫≠t)
    proxy_val = acc.get("proxy", "").strip() if acc.get("proxy") else None
    proxy = None
    if proxy_val:
        scheme = proxy_works(proxy_val)
        if scheme:
            proxy = f"{scheme}://{proxy_val}"
            log_action(f"üåê S·ª≠ d·ª•ng proxy: {proxy}")
        else:
            log_action(f"‚ö†Ô∏è Proxy {proxy_val} kh√¥ng kh·∫£ d·ª•ng ‚Üí fallback d√πng IP th·∫≠t c·ªßa m√°y.")
            proxy = None
    else:
        log_action("‚ÑπÔ∏è Kh√¥ng c√≥ proxy trong account ‚Üí d√πng IP th·∫≠t m·∫∑c ƒë·ªãnh.")

    driver = None
    try:
        for step in workflow:
            action = step.get("action")
            desc = substitute_vars(step.get("desc", ""), acc)
            log_action(f"üîπ {desc}")

            if action == "open_url":
                url = substitute_vars(step.get("url", ""), acc)
                # pass proxy WITHOUT scheme to open_edge_window_new_instance so it can re-detect if needed,
                # but here we pass proxy_val (raw ip:port) if we had one, else None
                driver = open_edge_window_new_instance(url, proxy_val if proxy else None)
                time.sleep(random.uniform(0.8, 1.4))

            elif action == "click_dom":
                selector = substitute_vars(step.get("selector", ""), acc)
                log_action(f"üñ±Ô∏è Click DOM: {selector}")
                if driver:
                    try:
                        WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH, selector)))
                        element = driver.find_element(By.XPATH, selector)
                        driver.execute_script("arguments[0].scrollIntoView({behavior:'smooth',block:'center'});", element)
                        # d√πng JS click v√¨ ƒë√¥i khi element l√† <a> v·ªõi JS handler
                        driver.execute_script("arguments[0].click();", element)
                        log_action("‚úÖ ƒê√£ click DOM th√†nh c√¥ng!")
                        time.sleep(random.uniform(0.8, 1.6))
                    except Exception as e:
                        log_action(f"‚ùå L·ªói khi click_dom: {e}")
                else:
                    log_action("‚ö†Ô∏è Kh√¥ng c√≥ phi√™n Edge n√†o ƒëang ch·∫°y ƒë·ªÉ click.")

            elif action == "sleep":
                seconds = step.get("seconds", 1)
                log_action(f"‚è≥ Ch·ªù {seconds} gi√¢y...")
                time.sleep(seconds)

            elif action == "fill_login_form":
                if not driver:
                    log_action("‚ö†Ô∏è Kh√¥ng c√≥ driver ƒë·ªÉ nh·∫≠p form.")
                    continue

                user_selector = substitute_vars(step.get("user_selector", ""), acc)
                pass_selector = substitute_vars(step.get("pass_selector", ""), acc)
                submit_selector = substitute_vars(step.get("submit_selector", ""), acc)

                log_action("‚úèÔ∏è Nh·∫≠p nhanh (fast) username/password b·∫±ng JS native setter, kh√¥ng g√µ th·ªß c√¥ng.")

                try:
                    # ch·ªù element hi·ªán
                    WebDriverWait(driver, 12).until(EC.visibility_of_element_located((By.XPATH, user_selector)))
                    WebDriverWait(driver, 12).until(EC.visibility_of_element_located((By.XPATH, pass_selector)))

                    user_input = driver.find_element(By.XPATH, user_selector)
                    pass_input = driver.find_element(By.XPATH, pass_selector)

                    # JS snippet: d√πng native setter (t·ªët v·ªõi React) r·ªìi dispatch nhi·ªÅu event nhanh
                    set_and_fire = """
                        var el = arguments[0], val = arguments[1];
                        var nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
                        if(nativeSetter) {
                            nativeSetter.call(el, val);
                        } else {
                            el.value = val;
                        }
                        el.dispatchEvent(new Event('input', {bubbles:true}));
                        el.dispatchEvent(new Event('change', {bubbles:true}));
                        try { el.dispatchEvent(new KeyboardEvent('keydown', {bubbles:true})); } catch(e){}
                        try { el.dispatchEvent(new KeyboardEvent('keyup', {bubbles:true})); } catch(e){}
                        try { el.blur(); } catch(e){}
                    """

                    # set username & password quickly
                    driver.execute_script(set_and_fire, user_input, acc.get("username", ""))
                    driver.execute_script(set_and_fire, pass_input, acc.get("password", ""))

                    # nh·ªè delay ƒë·ªÉ JS x·ª≠ l√Ω (nh·ªè, v√¨ b·∫°n mu·ªën nhanh)
                    time.sleep(0.5)

                    # click submit b·∫±ng JS (th∆∞·ªùng reliable & nhanh)
                    try:
                        WebDriverWait(driver, 6).until(EC.element_to_be_clickable((By.XPATH, submit_selector)))
                        btn = driver.find_element(By.XPATH, submit_selector)
                        driver.execute_script("arguments[0].click();", btn)
                        log_action("‚û°Ô∏è ƒê√£ click n√∫t login b·∫±ng JS (fast).")
                    except Exception as e:
                        log_action(f"‚ö†Ô∏è Kh√¥ng click ƒë∆∞·ª£c n√∫t submit: {e}")

                    # ch·ªù ng·∫Øn ƒë·ªÉ xem k·∫øt qu·∫£ (v√¨ b·∫°n c·∫ßn nhanh, gi·ªØ ng·∫Øn)
                    time.sleep(2)

                    # ki·ªÉm tra th√†nh c√¥ng b·∫±ng heuristics: element logout/avatar ho·∫∑c URL thay ƒë·ªïi
                    success = False
                    possible_success_xpaths = [
                        "//button[contains(., 'ƒêƒÉng xu·∫•t')]",
                        "//a[contains(., '„É≠„Ç∞„Ç¢„Ç¶„Éà')]",
                        "//div[contains(text(),'Xin ch√†o')]",
                        "//img[contains(@class,'avatar')]",
                    ]
                    for sx in possible_success_xpaths:
                        try:
                            if driver.find_elements(By.XPATH, sx):
                                log_action(f"‚úÖ Ph√°t hi·ªán ph·∫ßn t·ª≠ x√°c nh·∫≠n login (fast): {sx}")
                                success = True
                                break
                        except:
                            pass

                    if not success:
                        curr = driver.current_url
                        try:
                            WebDriverWait(driver, 4).until(lambda d: d.current_url != curr)
                            log_action(f"‚úÖ URL ƒë·ªïi sau submit -> {driver.current_url}")
                            success = True
                        except:
                            log_action("üîç URL kh√¥ng ƒë·ªïi (fast check).")

                    if not success:
                        # l∆∞u debug: screenshot + page_source (g·∫ßn nh∆∞ immediate)
                        try:
                            screenshot_path = f"debug_fast_login_{username}_{int(time.time())}.png"
                            driver.save_screenshot(screenshot_path)
                            log_action(f"üñºÔ∏è L∆∞u screenshot debug: {screenshot_path}")
                        except Exception as e:
                            log_action(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u screenshot debug: {e}")

                        try:
                            ps = driver.page_source
                            snippet = ps[:1600]
                            log_action("üîé Snippet page_source (fast) 1600 k√Ω t·ª± ƒë·∫ßu:")
                            log_action(snippet)
                        except Exception as e:
                            log_action(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc page_source: {e}")

                        log_action("‚ùå Fast login kh√¥ng x√°c nh·∫≠n th√†nh c√¥ng ‚Äî c√≥ th·ªÉ site c·∫ßn event t∆∞∆°ng t√°c 'th·∫≠t' ho·∫∑c c√≥ anti-bot/captcha.")
                    else:
                        log_action("üéâ Fast login th√†nh c√¥ng (theo heuristics).")

                except Exception as e:
                    log_action(f"‚ùå L·ªói khi th·ª±c hi·ªán fast fill_login_form: {e}")

            elif action == "click_image":
                img = substitute_vars(step.get("image", ""), acc)
                log_action(f"üñ±Ô∏è (M√¥ ph·ªèng click) ·∫¢nh: {img}")
                time.sleep(1)

            elif action == "fill_form":
                fields = step.get("fields", {})
                for k, v in fields.items():
                    val = substitute_vars(v, acc)
                    log_action(f"‚úèÔ∏è ƒêi·ªÅn {k}: {val}")
                    # n·∫øu c·∫ßn g√µ human-like cho c√°c input, c√≥ th·ªÉ m·ªü r·ªông sau
                    time.sleep(0.5)

                        # ---- NEW: x·ª≠ l√Ω ƒëi·ªÅn th√¥ng tin thanh to√°n th√¥ng minh ----
            elif action == "fill_payment_form":
                if not driver:
                    log_action("‚ö†Ô∏è Kh√¥ng c√≥ driver ƒë·ªÉ nh·∫≠p form thanh to√°n.")
                    continue

                selectors = step.get("selectors", {}) or {}
                is_new = acc.get("is_new", False)

                try:
                    log_action(f"üí≥ B·∫Øt ƒë·∫ßu ƒëi·ªÅn th√¥ng tin thanh to√°n (is_new={is_new})")

                    def safe_find(xpath, timeout=6):
                        try:
                            return WebDriverWait(driver, timeout).until(EC.presence_of_element_located((By.XPATH, xpath)))
                        except Exception:
                            return None

                    def fill_input(selector_key, value, prefer_send_keys=False):
                        """ƒêi·ªÅn input text nh∆∞ card_number ho·∫∑c CVV.
                        N·∫øu prefer_send_keys=True c·ªë g·∫Øng send_keys (human_type) tr∆∞·ªõc, sau ƒë√≥ fallback JS setter."""
                        sel = selectors.get(selector_key)
                        if not sel or value in (None, ""):
                            log_action(f"‚ö†Ô∏è B·ªè qua {selector_key} (thi·∫øu selector ho·∫∑c value tr·ªëng)")
                            return False
                        try:
                            # 1) try visibility
                            try:
                                el = WebDriverWait(driver, 8).until(EC.visibility_of_element_located((By.XPATH, sel)))
                            except Exception:
                                el = safe_find(sel, timeout=4)
                            if not el:
                                # c√≥ th·ªÉ element n·∫±m trong iframe ‚Äî th·ª≠ d√≤ iframe
                                iframes = driver.find_elements(By.TAG_NAME, "iframe")
                                found = False
                                for fr in iframes:
                                    try:
                                        driver.switch_to.frame(fr)
                                        found_el = driver.find_elements(By.XPATH, sel)
                                        if found_el:
                                            el = found_el[0]
                                            found = True
                                            log_action("‚ÑπÔ∏è T√¨m th·∫•y element trong iframe, ƒë√£ switch v√†o iframe.")
                                            break
                                        driver.switch_to.default_content()
                                    except Exception:
                                        driver.switch_to.default_content()
                                if not found:
                                    log_action(f"‚ùå Kh√¥ng t√¨m th·∫•y element cho {selector_key} b·∫±ng xpath: {sel}")
                                    return False

                            # N·∫øu element b·ªã che ph·ªß ho·∫∑c kh√¥ng interactable, scroll into view
                            try:
                                driver.execute_script("arguments[0].scrollIntoView({behavior:'auto',block:'center'});", el)
                            except Exception:
                                pass

                            # N·∫øu ch·ªâ th√≠ch send_keys (∆∞u ti√™n cho CVV)
                            if prefer_send_keys:
                                try:
                                    el.clear()
                                except:
                                    pass
                                try:
                                    human_type(driver, el, str(value), min_delay=0.03, max_delay=0.09)
                                    log_action(f"‚úÖ (send_keys) ƒêi·ªÅn {selector_key}: {value}")
                                    time.sleep(0.3)
                                    driver.switch_to.default_content()
                                    return True
                                except Exception as e:
                                    log_action(f"‚ö†Ô∏è send_keys th·∫•t b·∫°i cho {selector_key}: {e} ‚Äî fallback JS setter")

                            # Fallback: JS setter (good for React)
                            try:
                                driver.execute_script("""
                                    var el = arguments[0], val = arguments[1];
                                    var nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
                                    if(nativeSetter) nativeSetter.call(el, val); else el.value = val;
                                    el.dispatchEvent(new Event('input', {bubbles:true}));
                                    el.dispatchEvent(new Event('change', {bubbles:true}));
                                """, el, str(value))
                                log_action(f"‚úÖ (JS) ƒêi·ªÅn {selector_key}: {value}")
                                time.sleep(0.3)
                                driver.switch_to.default_content()
                                return True
                            except Exception as e:
                                log_action(f"‚ùå JS setter th·∫•t b·∫°i cho {selector_key}: {e}")
                                try:
                                    driver.switch_to.default_content()
                                except:
                                    pass
                                return False

                        except Exception as e:
                            log_action(f"‚ùå L·ªói khi ƒëi·ªÅn {selector_key}: {e}")
                            try:
                                driver.switch_to.default_content()
                            except:
                                pass
                            return False

                    def fill_select(selector_key, value):
                        sel = selectors.get(selector_key)
                        if not sel or value in (None, ""):
                            log_action(f"‚ö†Ô∏è B·ªè qua {selector_key} (thi·∫øu selector ho·∫∑c value tr·ªëng)")
                            return False
                        try:
                            WebDriverWait(driver, 8).until(EC.visibility_of_element_located((By.XPATH, sel)))
                            el = driver.find_element(By.XPATH, sel)
                            driver.execute_script("""
                                var sel = arguments[0], val = arguments[1];
                                var option = Array.from(sel.options).find(o => o.value === val || o.text === val);
                                if(option) sel.value = option.value;
                                sel.dispatchEvent(new Event('change', {bubbles:true}));
                            """, el, str(value))
                            log_action(f"‚úÖ Ch·ªçn {selector_key}: {value}")
                            time.sleep(0.3)
                            return True
                        except Exception as e:
                            log_action(f"‚ùå L·ªói khi ch·ªçn {selector_key}: {e}")
                            return False

                    # ----- th·ª±c hi·ªán fill -----
                    if is_new:
                        # 1) s·ªë th·∫ª + exp month/year
                        fill_input("card_number", acc.get("card_number"), prefer_send_keys=True)
                        fill_select("card_exp_month", acc.get("card_exp_month"))
                        fill_select("card_exp_year", acc.get("card_exp_year"))
                        log_action("üéâ Ho√†n t·∫•t nh·∫≠p th√¥ng tin th·∫ª m·ªõi.")

                        # 2) ch·ªçn radio (n·∫øu c√≥)
                        radio_selector = selectors.get("payment_radio") or "//input[@id='a03']"
                        try:
                            radio = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.XPATH, radio_selector)))
                            driver.execute_script("arguments[0].click();", radio)
                            log_action("‚úÖ ƒê√£ click radio paymentTypeCode b·∫±ng JS.")
                            time.sleep(0.5)
                        except Exception as e:
                            log_action(f"‚ö†Ô∏è Kh√¥ng click ƒë∆∞·ª£c radio paymentTypeCode: {e}")

                        # 3) Click n√∫t K·∫ø ti·∫øp (retry 3 l·∫ßn)
                        next_btn_selector = selectors.get("next_button") or "/html/body/div[1]/div/div[2]/form/div[2]/div[1]/div[1]/div[2]/ul/li/div/a"
                        clicked = False
                        for attempt in range(3):
                            try:
                                next_btn = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.XPATH, next_btn_selector)))
                                driver.execute_script("arguments[0].scrollIntoView({behavior:'auto',block:'center'});", next_btn)
                                driver.execute_script("arguments[0].click();", next_btn)
                                log_action(f"‚úÖ ƒê√£ click n√∫t K·∫ø ti·∫øp (attempt {attempt+1})")
                                clicked = True
                                time.sleep(1)
                                break
                            except Exception as e:
                                log_action(f"‚ö†Ô∏è Click K·∫ø ti·∫øp attempt {attempt+1} th·∫•t b·∫°i: {e}")
                                time.sleep(0.6)
                        if not clicked:
                            log_action("‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t K·∫ø ti·∫øp sau 3 l·∫ßn th·ª≠.")

                    else:
                        # ch·ªâ ƒëi·ªÅn CVV
                        cvv_filled = False
                        # 1) th·ª≠ selector t·ª´ workflow
                        if fill_input("card_cvv", acc.get("card_cvv"), prefer_send_keys=True):
                            cvv_filled = True
                        else:
                            # 2) fallback: t√¨m b·∫±ng name attribute
                            try:
                                els = driver.find_elements(By.NAME, "creditCard.securityCode")
                                if els:
                                    el = els[0]
                                    human_type(driver, el, str(acc.get("card_cvv", "")), min_delay=0.03, max_delay=0.09)
                                    log_action("‚úÖ ƒêi·ªÅn CVV b·∫±ng selector name=creditCard.securityCode")
                                    cvv_filled = True
                                else:
                                    # 3) fallback class
                                    els2 = driver.find_elements(By.CSS_SELECTOR, "input.js_c_securityCode")
                                    if els2:
                                        el = els2[0]
                                        human_type(driver, el, str(acc.get("card_cvv", "")), min_delay=0.03, max_delay=0.09)
                                        log_action("‚úÖ ƒêi·ªÅn CVV b·∫±ng class js_c_securityCode")
                                        cvv_filled = True
                            except Exception as e:
                                log_action(f"‚ö†Ô∏è Fallback ƒëi·ªÅn CVV l·ªói: {e}")

                        if not cvv_filled:
                            log_action("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn CVV ‚Äî c√≥ th·ªÉ element n·∫±m trong iframe ho·∫∑c selector sai.")
                        else:
                            log_action("üéâ Ho√†n t·∫•t nh·∫≠p CVV.")

                        # Click n√∫t Thanh to√°n (d√πng XPath b·∫°n cung c·∫•p, retry)
                        pay_btn_selector = selectors.get("pay_button") or "/html/body/div[1]/div/div[2]/form/div[2]/div/table/tbody/tr/td[2]/div[1]/div[1]/div/a"
                        clicked = False
                        for attempt in range(4):
                            try:
                                pay_btn = WebDriverWait(driver, 8).until(EC.element_to_be_clickable((By.XPATH, pay_btn_selector)))
                                driver.execute_script("arguments[0].scrollIntoView({behavior:'auto',block:'center'});", pay_btn)
                                driver.execute_script("arguments[0].click();", pay_btn)
                                log_action(f"‚úÖ ƒê√£ click n√∫t Thanh to√°n (attempt {attempt+1})")
                                clicked = True
                                time.sleep(1)
                                break
                            except Exception as e:
                                log_action(f"‚ö†Ô∏è Click Thanh to√°n attempt {attempt+1} th·∫•t b·∫°i: {e}")
                                time.sleep(0.6)
                        if not clicked:
                            log_action("‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t Thanh to√°n sau 4 l·∫ßn th·ª≠.")

                except Exception as e:
                    log_action(f"‚ùå L·ªói khi th·ª±c hi·ªán fill_payment_form: {e}")


            else:
                log_action(f"‚ö†Ô∏è Action ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£: {action}")

        log_action(f"‚úÖ Ho√†n t·∫•t t√†i kho·∫£n {username}")
    except Exception as e:
        log_action(f"‚ùå L·ªói khi x·ª≠ l√Ω {username}: {e}")
    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass

# =========================
# ROUTES (ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n)
# =========================
@app.route("/")
def index():
    return render_template("index.html")


@app.route("/accounts")
def get_accounts():
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
            return jsonify(json.load(f))
    return jsonify([])

@app.route("/save_one", methods=["POST"])
def save_one():
    try:
        incoming = request.get_json(silent=True)  # tr·∫£ None n·∫øu kh√¥ng ph·∫£i JSON
        print("üì© /save_one payload:", incoming)  # debug

        if not incoming:
            return jsonify({"result": "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c JSON. H√£y g·ª≠i Content-Type: application/json"}), 400

        # ch·∫•p nh·∫≠n c·∫£ email ho·∫∑c username
        email = incoming.get("email") or incoming.get("username")
        password = incoming.get("password") or incoming.get("pass") or incoming.get("pwd")

        if not email or not password:
            return jsonify({"result": "‚ùå Thi·∫øu th√¥ng tin t√†i kho·∫£n! C·∫ßn 'email/username' v√† 'password'."}), 400

        # load existing accounts
        accounts = load_accounts()

        # ƒë·ªãnh danh account b·∫±ng tr∆∞·ªùng email/username; b·∫°n c√≥ th·ªÉ ƒë·ªïi th√†nh 'username' n·∫øu mu·ªën
        existing = next((acc for acc in accounts if acc.get("username") == email or acc.get("email") == email), None)

        if existing:
            existing.update(incoming)
            msg = f"üîÑ ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n: {email}"
        else:
            # n·∫øu mu·ªën t·ª± t·∫°o id, th√™m id
            if "id" not in incoming:
                # t·∫°o id ƒë∆°n gi·∫£n (millis)
                incoming["id"] = int(time.time() * 1000)
            # chu·∫©n ho√° l∆∞u: gi·ªØ c·∫£ username v√† email tr∆∞·ªùng username n·∫øu tr∆∞·ªõc ƒë√≥ d√πng username
            if "username" not in incoming and "email" in incoming:
                incoming["username"] = incoming["email"]
            accounts.append(incoming)
            msg = f"üÜï ƒê√£ th√™m t√†i kho·∫£n m·ªõi: {email}"

        save_accounts(accounts)
        return jsonify({"result": "‚úÖ Th√†nh c√¥ng", "message": msg})

    except Exception as e:
        log_action(f"‚ùå L·ªói /save_one: {e}")
        return jsonify({"result": "‚ùå L·ªói server", "error": str(e)}), 500


@app.route("/save", methods=["POST"])
def save_all():
    data = request.get_json()
    accounts = data.get("accounts", [])
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        json.dump(accounts, f, ensure_ascii=False, indent=2)
    log_action(f"L∆∞u {len(accounts)} t√†i kho·∫£n.")
    return jsonify({"message": f"‚úÖ ƒê√£ l∆∞u {len(accounts)} t√†i kho·∫£n!"})


@app.route("/delete_account/<int:acc_id>", methods=["DELETE"])
def delete_account(acc_id):
    accounts = []
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
            accounts = json.load(f)
    new_accounts = [a for a in accounts if a.get("id") != acc_id]
    if len(new_accounts) == len(accounts):
        log_action(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√≥ id={acc_id} ƒë·ªÉ x√≥a.")
        return jsonify({"message": f"‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√≥ id={acc_id}!"}), 404
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        json.dump(new_accounts, f, ensure_ascii=False, indent=2)
    log_action(f"üóëÔ∏è ƒê√£ x√≥a t√†i kho·∫£n id={acc_id}")
    return jsonify({"message": f"‚úÖ ƒê√£ x√≥a t√†i kho·∫£n id={acc_id}!"})


@app.route("/logs")
def get_logs():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            content = f.read()
    else:
        content = "‚ö†Ô∏è Ch∆∞a c√≥ log n√†o!"
    return jsonify({"logs": content})


@app.route("/start", methods=["POST"])
def start_workflow():
    data = request.get_json()
    selected_accounts = data.get("accounts", [])
    if not selected_accounts:
        return jsonify({"result": "‚ùå Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn!"})

    log_action(f"‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o {len(selected_accounts)} threads (m·ªói thread start c√°ch nhau 3s)...")

    # start m·ªói t√†i kho·∫£n trong 1 thread ri√™ng BUT kh·ªüi t·∫°o threads c√°ch nhau 3s
    for idx, acc in enumerate(selected_accounts):
        t = threading.Thread(target=run_workflow_for_account, args=(acc,), daemon=True)
        t.start()
        log_action(f"üü¢ ƒê√£ start thread cho {acc.get('username')} (idx {idx})")
        # ch·ªù 3s tr∆∞·ªõc khi start thread ti·∫øp theo (kh√¥ng ch·∫∑n c√°c thread ƒë√£ start)
        if idx < len(selected_accounts) - 1:
            time.sleep(3)

    return jsonify({"result": f"üöÄ ƒê√£ b·∫Øt ƒë·∫ßu {len(selected_accounts)} t√†i kho·∫£n (staggered 3s)!"})


if __name__ == "__main__":
    app.run(debug=True, port=5000)
