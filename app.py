from flask import Flask, request, jsonify, render_template
import json, os, time, threading, random, requests, zipfile, tempfile, shutil, subprocess
from datetime import datetime
from zipfile import ZipFile
from threading import Lock
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options as EdgeOptions

app = Flask(__name__)

# paths / files
driver_path = r"msedgedriver.exe"
ACCOUNTS_FILE = "accounts.json"
WORKFLOW_FILE = "workflow.json"
LOG_FILE = "logs.txt"
running_accounts = {}  # username -> start_time (timestamp)
LOCK_DURATION = 2 * 60  # 2 ph√∫t
TELEGRAM_BOT_TOKEN = "8250041358:AAFXomknlgg2-oq9pztHZqaewlFbZPZ2wS4"
TELEGRAM_CHAT_ID = "-1003136584516"


# lock cho ghi log (tr√°nh race condition)
_log_lock = Lock()

# ƒë·∫£m b·∫£o file t·ªìn t·∫°i
for file in [ACCOUNTS_FILE, WORKFLOW_FILE]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)

def can_run_account(username):
    """Ki·ªÉm tra account c√≥ th·ªÉ ch·∫°y kh√¥ng"""
    now = time.time()
    start_time = running_accounts.get(username)
    if start_time and now - start_time < LOCK_DURATION:
        return False
    return True

def mark_running(username):
    running_accounts[username] = time.time()

def proxy_works_http(proxy_raw):
    """Ki·ªÉm tra HTTP proxy auth b·∫±ng requests"""
    parts = proxy_raw.strip().split(":")
    if len(parts) != 4:
        log_action(f"‚ùå Proxy HTTP format sai: {proxy_raw}")
        return False
    ip, port, user, pwd = parts
    proxy_url = f"http://{user}:{pwd}@{ip}:{port}"
    proxies = {"http": proxy_url, "https": proxy_url}
    try:
        r = requests.get("https://api.ipify.org", proxies=proxies, timeout=5)
        log_action(f"‚úÖ HTTP proxy s·ªëng: {proxy_raw} => IP: {r.text}")
        return True
    except:
        log_action(f"‚ùå HTTP proxy ch·∫øt: {proxy_raw}")
        return False



def send_telegram_message(text):
    """G·ª≠i th√¥ng b√°o Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
        requests.post(url, json=payload, timeout=5)
        log_action(f"üì© ƒê√£ g·ª≠i Telegram: {text}")
    except Exception as e:
        log_action(f"‚ö†Ô∏è L·ªói g·ª≠i Telegram: {e}")

def log_action(message):
    ts = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    line = f"{ts} {message}\n"
    # in ra console
    print(line.strip())
    # ghi file an to√†n
    with _log_lock:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(line)
def load_accounts():
    if not os.path.exists(ACCOUNTS_FILE):
        return []
    with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []

def save_accounts(data):
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)



def open_edge_with_http_proxy(url, proxy=None):
    """
    M·ªü Edge WebDriver d√πng HTTP proxy v·ªõi user:pass th√¥ng qua extension t·∫°m.
    proxy = "ip:port:user:pass"
    """
    service = Service(driver_path)
    options = EdgeOptions()
    options.add_argument("--start-maximized")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)
    options.add_argument("--disable-blink-features=AutomationControlled")

    temp_dir = None
    ext_path = None

    if proxy:
        parts = proxy.strip().split(":")
        if len(parts) == 4:
            ip, port, user, pwd = parts
            try:
                # T·∫°o folder t·∫°m
                temp_dir = tempfile.mkdtemp()
                ext_name = f"http_proxy_auth_{int(time.time())}.zip"
                ext_path = os.path.join(temp_dir, ext_name)

                manifest_json = {
                    "version": "1.0.0",
                    "manifest_version": 2,
                    "name": "HTTP Proxy Auth Extension",
                    "permissions": ["proxy", "tabs", "unlimitedStorage", "storage", "<all_urls>", "webRequest", "webRequestBlocking"],
                    "background": {"scripts": ["background.js"]}
                }

                background_js = f"""
                var config = {{
                    mode: "fixed_servers",
                    rules: {{
                        singleProxy: {{
                            scheme: "http",
                            host: "{ip}",
                            port: parseInt({port})
                        }},
                        bypassList: ["localhost"]
                    }}
                }};
                chrome.proxy.settings.set({{value: config, scope: "regular"}}, function(){{}});
                function callbackFn(details) {{
                    return {{
                        authCredentials: {{
                            username: "{user}",
                            password: "{pwd}"
                        }}
                    }};
                }}
                chrome.webRequest.onAuthRequired.addListener(
                    callbackFn,
                    {{urls: ["<all_urls>"]}},
                    ['blocking']
                );
                """

                with ZipFile(ext_path, 'w') as zp:
                    zp.writestr("manifest.json", json.dumps(manifest_json))
                    zp.writestr("background.js", background_js)

                options.add_extension(ext_path)
                log_action(f"üîå Load HTTP proxy auth extension: {ext_path}")

            except Exception as e:
                log_action(f"‚ùå L·ªói t·∫°o extension proxy: {e}")
                if temp_dir and os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir, ignore_errors=True)

        else:
            log_action(f"‚ùå Proxy format sai: {proxy}")

    # Kh·ªüi t·∫°o EdgeDriver
    try:
        driver = webdriver.Edge(service=service, options=options)
    except Exception as e:
        log_action(f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Edge WebDriver: {e}")
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir, ignore_errors=True)
        return None

    # CDP tweak ch·ªëng detect
    try:
        driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
            "source": """
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                window.navigator.chrome = { runtime: {} };
                Object.defineProperty(navigator, 'plugins', {get: () => [1,2,3,4]});
                Object.defineProperty(navigator, 'languages', {get: () => ['en-US','en']});
            """
        })
    except Exception as e:
        log_action(f"‚ö†Ô∏è CDP tweak kh√¥ng ch·∫°y: {e}")

    # M·ªü trang
    try:
        driver.set_page_load_timeout(30)
        driver.get(url)
        log_action(f"üåç M·ªü trang: {url}")
    except Exception as e:
        log_action(f"‚ö†Ô∏è L·ªói khi load trang {url}: {e}")

    # Th√™m h√†m cleanup t·∫°m
    def cleanup_extension():
        if temp_dir and os.path.exists(temp_dir):
            try:
                shutil.rmtree(temp_dir, ignore_errors=True)
                log_action("üóëÔ∏è ƒê√£ cleanup extension t·∫°m")
            except Exception as e:
                log_action(f"‚ö†Ô∏è L·ªói cleanup extension t·∫°m: {e}")

    driver.cleanup_extension = cleanup_extension

    return driver

# ---------- helper: human typing ----------
def human_type(driver, element, text, min_delay=0.06, max_delay=0.18):
    """
    G√µ t·ª´ng k√Ω t·ª± v·ªõi delay ng·∫´u nhi√™n ƒë·ªÉ gi·ªëng ng∆∞·ªùi th·∫≠t.
    Sau khi g√µ xong, ph√°t event 'input' ƒë·ªÉ JS tr√™n trang nh·∫≠n.
    """
    try:
        element.click()
    except Exception:
        pass

    for ch in text:
        element.send_keys(ch)
        time.sleep(random.uniform(min_delay, max_delay))

    try:
        driver.execute_script(
            "var el = arguments[0]; el.dispatchEvent(new Event('input', {bubbles: true}));",
            element,
        )
    except Exception:
        pass


def substitute_vars(text, acc):
    if not isinstance(text, str):
        return text
    for k, v in acc.items():
        text = text.replace(f"{{{{selected_account.{k}}}}}", str(v))
    return text


def load_workflow():
    try:
        with open(WORKFLOW_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log_action(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc workflow.json: {e}")
        return []


def run_workflow_for_account(acc, workflow_override=None):
    """Ch·∫°y workflow cho 1 t√†i kho·∫£n (d√πng chung cho c·∫£ workflow v√† tracking)"""
    if workflow_override is not None:
        workflow = workflow_override
    else:
        workflow = load_workflow()

    if not workflow:
        log_action("‚ùå Kh√¥ng t√¨m th·∫•y workflow.json ho·∫∑c r·ªóng!")
        return

    username = acc.get("username")
    log_action(f"\n--- üî∏ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω t√†i kho·∫£n {username} ---")

    # Ki·ªÉm tra proxy
    proxy_val = acc.get("proxy", "").strip() if acc.get("proxy") else None
    proxy = None
    if proxy_val:
        if proxy_works_http(proxy_val):
            proxy = proxy_val
            log_action(f"üåê S·ª≠ d·ª•ng proxy HTTP/HTTPS: {proxy}")
        else:
            log_action(f"‚ö†Ô∏è Proxy {proxy_val} kh√¥ng kh·∫£ d·ª•ng ‚Üí fallback d√πng IP th·∫≠t c·ªßa m√°y.")
            proxy = None
    else:
        log_action("‚ÑπÔ∏è Kh√¥ng c√≥ proxy trong account ‚Üí d√πng IP th·∫≠t m·∫∑c ƒë·ªãnh.")

    driver = None

    try:
        # H√†m ti·ªán √≠ch click b·∫±ng WebDriverWait
        def wait_and_click(xpath, timeout=8):
            try:
                el = WebDriverWait(driver, timeout).until(EC.element_to_be_clickable((By.XPATH, xpath)))
                driver.execute_script("arguments[0].scrollIntoView({behavior:'auto',block:'center'});", el)
                el.click()
                return True
            except Exception as e:
                log_action(f"‚ö†Ô∏è Click element {xpath} th·∫•t b·∫°i: {e}")
                return False

        # H√†m ti·ªán √≠ch ƒëi·ªÅn input b·∫±ng WebDriverWait
        def wait_and_fill(xpath, value, prefer_send_keys=False):
            try:
                el = WebDriverWait(driver, 8).until(EC.visibility_of_element_located((By.XPATH, xpath)))
                if prefer_send_keys:
                    try:
                        el.clear()
                        human_type(driver, el, str(value), min_delay=0.03, max_delay=0.09)
                        log_action(f"‚úÖ (send_keys) ƒêi·ªÅn {xpath}: {value}")
                        return True
                    except Exception as e:
                        log_action(f"‚ö†Ô∏è send_keys th·∫•t b·∫°i cho {xpath}: {e} ‚Äî fallback JS setter")
                # fallback JS
                driver.execute_script("""
                    var el = arguments[0], val = arguments[1];
                    var nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
                    if(nativeSetter) nativeSetter.call(el, val); else el.value = val;
                    el.dispatchEvent(new Event('input', {bubbles:true}));
                    el.dispatchEvent(new Event('change', {bubbles:true}));
                """, el, str(value))
                log_action(f"‚úÖ (JS) ƒêi·ªÅn {xpath}: {value}")
                return True
            except Exception as e:
                log_action(f"‚ùå ƒêi·ªÅn {xpath} th·∫•t b·∫°i: {e}")
                return False

        for step in workflow:
            action = step.get("action")
            desc = substitute_vars(step.get("desc", ""), acc)
            log_action(f"üîπ {desc}")

            if action == "open_url":
                url = substitute_vars(step.get("url", ""), acc)
                driver = open_edge_with_http_proxy(url, proxy if proxy else None)
                time.sleep(random.uniform(0.8, 1.4))

            elif action == "click_dom":
                selector = substitute_vars(step.get("selector", ""), acc)
                log_action(f"üñ±Ô∏è Click DOM: {selector}")
                if driver:
                    wait_and_click(selector)
                    time.sleep(random.uniform(0.8, 1.6))
                else:
                    log_action("‚ö†Ô∏è Kh√¥ng c√≥ phi√™n Edge n√†o ƒëang ch·∫°y ƒë·ªÉ click.")

            elif action == "sleep":
                seconds = step.get("seconds", 1)
                log_action(f"‚è≥ Ch·ªù {seconds} gi√¢y...")
                time.sleep(seconds)

            elif action == "fill_login_form":
                if not driver:
                    log_action("‚ö†Ô∏è Kh√¥ng c√≥ driver ƒë·ªÉ nh·∫≠p form.")
                    continue

                user_selector = substitute_vars(step.get("user_selector", ""), acc)
                pass_selector = substitute_vars(step.get("pass_selector", ""), acc)
                submit_selector = substitute_vars(step.get("submit_selector", ""), acc)

                log_action("‚úèÔ∏è Nh·∫≠p nhanh (fast) username/password b·∫±ng JS native setter, kh√¥ng g√µ th·ªß c√¥ng.")
                try:
                    wait_and_fill(user_selector, acc.get("username", ""))
                    wait_and_fill(pass_selector, acc.get("password", ""))
                    wait_and_click(submit_selector)
                    time.sleep(2)

                    # Check success heuristics
                    success = False
                    possible_success_xpaths = [
                        "//button[contains(., 'ƒêƒÉng xu·∫•t')]",
                        "//a[contains(., '„É≠„Ç∞„Ç¢„Ç¶„Éà')]",
                        "//div[contains(text(),'Xin ch√†o')]",
                        "//img[contains(@class,'avatar')]",
                    ]
                    for sx in possible_success_xpaths:
                        if driver.find_elements(By.XPATH, sx):
                            log_action(f"‚úÖ Ph√°t hi·ªán ph·∫ßn t·ª≠ x√°c nh·∫≠n login: {sx}")
                            success = True
                            break

                    if not success:
                        curr = driver.current_url
                        try:
                            WebDriverWait(driver, 4).until(lambda d: d.current_url != curr)
                            log_action(f"‚úÖ URL ƒë·ªïi sau submit -> {driver.current_url}")
                            success = True
                        except:
                            log_action("üîç URL kh√¥ng ƒë·ªïi (fast check).")

                    if not success:
                        screenshot_path = f"debug_fast_login_{username}_{int(time.time())}.png"
                        driver.save_screenshot(screenshot_path)
                        log_action(f"üñºÔ∏è L∆∞u screenshot debug: {screenshot_path}")
                        log_action("‚ùå Fast login kh√¥ng x√°c nh·∫≠n th√†nh c√¥ng ‚Äî c√≥ th·ªÉ site c·∫ßn event t∆∞∆°ng t√°c 'th·∫≠t' ho·∫∑c c√≥ anti-bot/captcha.")
                    else:
                        log_action("üéâ Fast login th√†nh c√¥ng (theo heuristics).")
                except Exception as e:
                    log_action(f"‚ùå L·ªói khi th·ª±c hi·ªán fast fill_login_form: {e}")

            elif action == "wait_until_time":
                target_hour = step.get("hour", 0)
                target_minute = step.get("minute", 0)
                log_action(f"‚è≥ B·∫Øt ƒë·∫ßu ƒë·ª£i ƒë·∫øn {target_hour:02d}:{target_minute:02d} JST tr∆∞·ªõc khi ti·∫øp t·ª•c...")
                while True:
                    now = datetime.utcnow()
                    jst_hour = (now.hour + 9) % 24
                    jst_minute = now.minute
                    if (jst_hour > target_hour) or (jst_hour == target_hour and jst_minute >= target_minute):
                        log_action(f"‚úÖ ƒê√£ ƒë·∫øn gi·ªù {target_hour:02d}:{target_minute:02d} JST, ti·∫øp t·ª•c workflow.")
                        break
                    time.sleep(1)
                if driver:
                    try:
                        driver.refresh()
                        log_action("üîÑ ƒê√£ refresh trang sau khi ƒë·ª£i gi·ªù JST.")
                        time.sleep(1)
                    except Exception as e:
                        log_action(f"‚ö†Ô∏è Kh√¥ng refresh ƒë∆∞·ª£c trang: {e}")

            elif action == "click_image":
                img = substitute_vars(step.get("image", ""), acc)
                log_action(f"üñ±Ô∏è (M√¥ ph·ªèng click) ·∫¢nh: {img}")
                time.sleep(1)

            elif action == "fill_form":
                fields = step.get("fields", {})
                for k, v in fields.items():
                    val = substitute_vars(v, acc)
                    log_action(f"‚úèÔ∏è ƒêi·ªÅn {k}: {val}")
                    time.sleep(0.5)

            elif action == "fill_payment_form":
                if not driver:
                    log_action("‚ö†Ô∏è Kh√¥ng c√≥ driver ƒë·ªÉ nh·∫≠p form thanh to√°n.")
                    continue
                selectors = step.get("selectors", {}) or {}
                is_new = acc.get("is_new", False)
                try:
                    log_action(f"üí≥ B·∫Øt ƒë·∫ßu ƒëi·ªÅn th√¥ng tin thanh to√°n (is_new={is_new})")

                    def safe_find(xpath, timeout=6):
                        try:
                            return WebDriverWait(driver, timeout).until(
                                EC.presence_of_element_located((By.XPATH, xpath))
                            )
                        except Exception:
                            return None

                    def fill_input(selector_key, value, prefer_send_keys=False):
                        sel = selectors.get(selector_key)
                        if not sel or value in (None, ""):
                            log_action(f"‚ö†Ô∏è B·ªè qua {selector_key} (thi·∫øu selector ho·∫∑c value tr·ªëng)")
                            return False
                        try:
                            try:
                                el = WebDriverWait(driver, 8).until(
                                    EC.visibility_of_element_located((By.XPATH, sel))
                                )
                            except Exception:
                                el = safe_find(sel, timeout=4)

                            if not el:
                                iframes = driver.find_elements(By.TAG_NAME, "iframe")
                                found = False
                                for fr in iframes:
                                    try:
                                        driver.switch_to.frame(fr)
                                        found_el = driver.find_elements(By.XPATH, sel)
                                        if found_el:
                                            el = found_el[0]
                                            found = True
                                            log_action("‚ÑπÔ∏è T√¨m th·∫•y element trong iframe, ƒë√£ switch v√†o iframe.")
                                            break
                                        driver.switch_to.default_content()
                                    except Exception:
                                        driver.switch_to.default_content()
                                if not found:
                                    log_action(f"‚ùå Kh√¥ng t√¨m th·∫•y element cho {selector_key} b·∫±ng xpath: {sel}")
                                    return False
                            try:
                                driver.execute_script(
                                    "arguments[0].scrollIntoView({behavior:'auto',block:'center'});", el
                                )
                            except Exception:
                                pass

                            if prefer_send_keys:
                                try:
                                    el.clear()
                                except:
                                    pass
                                try:
                                    human_type(driver, el, str(value), min_delay=0.03, max_delay=0.09)
                                    log_action(f"‚úÖ (send_keys) ƒêi·ªÅn {selector_key}: {value}")
                                    time.sleep(0.3)
                                    driver.switch_to.default_content()
                                    return True
                                except Exception as e:
                                    log_action(f"‚ö†Ô∏è send_keys th·∫•t b·∫°i cho {selector_key}: {e} ‚Äî fallback JS setter")
                            try:
                                driver.execute_script("""
                                    var el = arguments[0], val = arguments[1];
                                    var nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
                                    if(nativeSetter) nativeSetter.call(el, val); else el.value = val;
                                    el.dispatchEvent(new Event('input', {bubbles:true}));
                                    el.dispatchEvent(new Event('change', {bubbles:true}));
                                """, el, str(value))
                                log_action(f"‚úÖ (JS) ƒêi·ªÅn {selector_key}: {value}")
                                time.sleep(0.3)
                                driver.switch_to.default_content()
                                return True
                            except Exception as e:
                                log_action(f"‚ùå JS setter th·∫•t b·∫°i cho {selector_key}: {e}")
                                try:
                                    driver.switch_to.default_content()
                                except:
                                    pass
                                return False

                        except Exception as e:
                            log_action(f"‚ùå L·ªói khi ƒëi·ªÅn {selector_key}: {e}")
                            try:
                                driver.switch_to.default_content()
                            except:
                                pass
                            return False

                    def fill_select(selector_key, value):
                        sel = selectors.get(selector_key)
                        if not sel or value in (None, ""):
                            log_action(f"‚ö†Ô∏è B·ªè qua {selector_key} (thi·∫øu selector ho·∫∑c value tr·ªëng)")
                            return False
                        try:
                            WebDriverWait(driver, 8).until(
                                EC.visibility_of_element_located((By.XPATH, sel))
                            )
                            el = driver.find_element(By.XPATH, sel)
                            driver.execute_script("""
                                var sel = arguments[0], val = arguments[1];
                                var option = Array.from(sel.options).find(o => o.value === val || o.text === val);
                                if(option) sel.value = option.value;
                                sel.dispatchEvent(new Event('change', {bubbles:true}));
                            """, el, str(value))
                            log_action(f"‚úÖ Ch·ªçn {selector_key}: {value}")
                            time.sleep(0.3)
                            return True
                        except Exception as e:
                            log_action(f"‚ùå L·ªói khi ch·ªçn {selector_key}: {e}")
                            return False

                    # --- ƒêi·ªÅn th·∫ª m·ªõi ho·∫∑c CVV ---
                    if is_new:
                        fill_input("card_number", acc.get("card_number"), prefer_send_keys=True)
                        fill_select("card_exp_month", acc.get("card_exp_month"))
                        fill_select("card_exp_year", acc.get("card_exp_year"))
                        log_action("üéâ Ho√†n t·∫•t nh·∫≠p th√¥ng tin th·∫ª m·ªõi.")
                        # Click radio paymentTypeCode (c·ª©ng fallback)
                        radio_selector = selectors.get("payment_radio") or "//input[@id='a03']"
                        try:
                            radio = WebDriverWait(driver, 8).until(
                                EC.element_to_be_clickable((By.XPATH, radio_selector))
                            )
                            driver.execute_script("arguments[0].click();", radio)
                            log_action("‚úÖ ƒê√£ click radio paymentTypeCode b·∫±ng JS.")
                            time.sleep(0.5)
                        except Exception as e:
                            log_action(f"‚ö†Ô∏è Kh√¥ng click ƒë∆∞·ª£c radio paymentTypeCode: {e}")

                        # Click n√∫t K·∫ø ti·∫øp (fallback c·ª©ng)
                        next_btn_selector = selectors.get("next_button") or "/html/body/div[1]/div/div[2]/form/div[2]/div[1]/div[1]/div[2]/ul/li/div/a"
                        clicked = False
                        for attempt in range(3):
                            try:
                                next_btn = WebDriverWait(driver, 8).until(
                                    EC.element_to_be_clickable((By.XPATH, next_btn_selector))
                                )
                                driver.execute_script(
                                    "arguments[0].scrollIntoView({behavior:'auto',block:'center'});", next_btn
                                )
                                driver.execute_script("arguments[0].click();", next_btn)
                                log_action(f"‚úÖ ƒê√£ click n√∫t K·∫ø ti·∫øp (attempt {attempt+1})")
                                clicked = True
                                time.sleep(1)
                                break
                            except Exception as e:
                                log_action(f"‚ö†Ô∏è Click K·∫ø ti·∫øp attempt {attempt+1} th·∫•t b·∫°i: {e}")
                                time.sleep(0.6)
                        if not clicked:
                            log_action("‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t K·∫ø ti·∫øp sau 3 l·∫ßn th·ª≠.")
                    else:
                        # ƒêi·ªÅn CVV
                        cvv_filled = False
                        if fill_input("card_cvv", acc.get("card_cvv"), prefer_send_keys=True):
                            cvv_filled = True
                        else:
                            try:
                                els = driver.find_elements(By.NAME, "creditCard.securityCode")
                                if els:
                                    el = els[0]
                                    human_type(driver, el, str(acc.get("card_cvv", "")), min_delay=0.03, max_delay=0.09)
                                    log_action("‚úÖ ƒêi·ªÅn CVV b·∫±ng selector name=creditCard.securityCode")
                                    cvv_filled = True
                                else:
                                    els2 = driver.find_elements(By.CSS_SELECTOR, "input.js_c_securityCode")
                                    if els2:
                                        el = els2[0]
                                        human_type(driver, el, str(acc.get("card_cvv", "")), min_delay=0.03, max_delay=0.09)
                                        log_action("‚úÖ ƒêi·ªÅn CVV b·∫±ng class js_c_securityCode")
                                        cvv_filled = True
                            except Exception as e:
                                log_action(f"‚ö†Ô∏è Fallback ƒëi·ªÅn CVV l·ªói: {e}")

                        if not cvv_filled:
                            log_action("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn CVV ‚Äî c√≥ th·ªÉ element n·∫±m trong iframe ho·∫∑c selector sai.")
                        else:
                            log_action("üéâ Ho√†n t·∫•t nh·∫≠p CVV.")

                        # Click n√∫t Thanh to√°n (fallback c·ª©ng)
                        pay_btn_selector = "/html/body/div[1]/div/div[2]/form/div[2]/div/table/tbody/tr/td[2]/div[1]/div[1]/div/a"
                        clicked = False
                        for attempt in range(4):
                            try:
                                pay_btn = WebDriverWait(driver, 8).until(
                                    EC.element_to_be_clickable((By.XPATH, pay_btn_selector))
                                )
                                driver.execute_script(
                                    "arguments[0].scrollIntoView({behavior:'auto',block:'center'});", pay_btn
                                )
                                driver.execute_script("arguments[0].click();", pay_btn)
                                log_action(f"‚úÖ ƒê√£ click n√∫t Thanh to√°n (attempt {attempt+1})")
                                clicked = True
                                time.sleep(1)
                                break
                            except Exception as e:
                                log_action(f"‚ö†Ô∏è Click Thanh to√°n attempt {attempt+1} th·∫•t b·∫°i: {e}")
                                time.sleep(0.6)
                        if not clicked:
                            log_action("‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t Thanh to√°n sau 4 l·∫ßn th·ª≠.")

                except Exception as e:
                    log_action(f"‚ùå L·ªói khi th·ª±c hi·ªán fill_payment_form: {e}")


            else:
                log_action(f"‚ö†Ô∏è Action ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£: {action}")

        log_action(f"‚úÖ Ho√†n t·∫•t t√†i kho·∫£n {username}")
        send_telegram_message(f"‚úÖ Mua h√†ng th√†nh c√¥ng cho t√†i kho·∫£n <b>{acc.get('username')}</b>")

    except Exception as e:
        log_action(f"‚ùå L·ªói khi x·ª≠ l√Ω {username}: {e}")
    finally:
        if driver:
            try:
                if hasattr(driver, "cleanup_extension"):
                    driver.cleanup_extension()
                driver.quit()
            except:
                pass

# =========================
# ROUTES (ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n)
# =========================
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/accounts")
def get_accounts():
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
            return jsonify(json.load(f))
    return jsonify([])

@app.route("/save_one", methods=["POST"])
def save_one():
    try:
        incoming = request.get_json(silent=True)  # tr·∫£ None n·∫øu kh√¥ng ph·∫£i JSON
        print("üì© /save_one payload:", incoming)  # debug
        if not incoming:
            return jsonify({"result": "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c JSON. H√£y g·ª≠i Content-Type: application/json"}), 400
        email = incoming.get("email") or incoming.get("username")
        password = incoming.get("password") or incoming.get("pass") or incoming.get("pwd")
        if not email or not password:
            return jsonify({"result": "‚ùå Thi·∫øu th√¥ng tin t√†i kho·∫£n! C·∫ßn 'email/username' v√† 'password'."}), 400
        accounts = load_accounts()
        existing = next((acc for acc in accounts if acc.get("username") == email or acc.get("email") == email), None)
        if existing:
            existing.update(incoming)
            msg = f"üîÑ ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n: {email}"
        else:
            if "id" not in incoming:
                incoming["id"] = int(time.time() * 1000)
            if "username" not in incoming and "email" in incoming:
                incoming["username"] = incoming["email"]
            accounts.append(incoming)
            msg = f"üÜï ƒê√£ th√™m t√†i kho·∫£n m·ªõi: {email}"

        save_accounts(accounts)
        return jsonify({"result": "‚úÖ Th√†nh c√¥ng", "message": msg})
    except Exception as e:
        log_action(f"‚ùå L·ªói /save_one: {e}")
        return jsonify({"result": "‚ùå L·ªói server", "error": str(e)}), 500

@app.route("/save", methods=["POST"])
def save_all():
    data = request.get_json()
    accounts = data.get("accounts", [])
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        json.dump(accounts, f, ensure_ascii=False, indent=2)
    log_action(f"L∆∞u {len(accounts)} t√†i kho·∫£n.")
    return jsonify({"message": f"‚úÖ ƒê√£ l∆∞u {len(accounts)} t√†i kho·∫£n!"})

@app.route("/delete_account/<int:acc_id>", methods=["DELETE"])
def delete_account(acc_id):
    accounts = []
    if os.path.exists(ACCOUNTS_FILE):
        with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
            accounts = json.load(f)
    new_accounts = [a for a in accounts if a.get("id") != acc_id]
    if len(new_accounts) == len(accounts):
        log_action(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√≥ id={acc_id} ƒë·ªÉ x√≥a.")
        return jsonify({"message": f"‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√≥ id={acc_id}!"}), 404
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        json.dump(new_accounts, f, ensure_ascii=False, indent=2)
    log_action(f"üóëÔ∏è ƒê√£ x√≥a t√†i kho·∫£n id={acc_id}")
    return jsonify({"message": f"‚úÖ ƒê√£ x√≥a t√†i kho·∫£n id={acc_id}!"})

@app.route("/logs")
def get_logs():
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            content = f.read()
    else:
        content = "‚ö†Ô∏è Ch∆∞a c√≥ log n√†o!"
    return jsonify({"logs": content})

@app.route("/start", methods=["POST"])
def start_workflow():
    data = request.get_json()
    selected_accounts = data.get("accounts", [])
    if not selected_accounts:
        return jsonify({"result": "‚ùå Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn!"})

    # L·ªçc account ch∆∞a ch·∫°y ho·∫∑c ƒë√£ h·∫øt 2 ph√∫t
    accounts_to_run = []
    for acc in selected_accounts:
        username = acc.get("username")
        if username and can_run_account(username):
            accounts_to_run.append(acc)
            mark_running(username)

    if not accounts_to_run:
        return jsonify({"result": "‚ö†Ô∏è T·∫•t c·∫£ c√°c t√†i kho·∫£n ƒëang ch·∫°y ho·∫∑c b·ªã lock 2 ph√∫t."})

    log_action(f"‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o {len(accounts_to_run)} threads (m·ªói thread start c√°ch nhau 3s)...")
    for idx, acc in enumerate(accounts_to_run):
        t = threading.Thread(target=run_workflow_for_account, args=(acc,), daemon=True)
        t.start()
        log_action(f"üü¢ ƒê√£ start thread cho {acc.get('username')} (idx {idx})")
        if idx < len(accounts_to_run) - 1:
            time.sleep(3)
    return jsonify({"result": f"üöÄ ƒê√£ b·∫Øt ƒë·∫ßu {len(accounts_to_run)} t√†i kho·∫£n (staggered 3s)!"})

@app.route("/run_tracking", methods=["POST"])
def run_tracking():
    try:
        # c·ªë g·∫Øng parse JSON (tr·∫£ 400 n·∫øu kh√¥ng c√≥ JSON)
        data = request.get_json(silent=True)
        if data is None:
            log_action("‚ùå /run_tracking nh·∫≠n request nh∆∞ng kh√¥ng ph·∫£i JSON ho·∫∑c thi·∫øu Content-Type: application/json")
            return jsonify({"result": "‚ùå Thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá JSON. H√£y g·ª≠i Content-Type: application/json"}), 400

        # H·ªó tr·ª£ 2 d·∫°ng payload:
        # 1) {"accounts": [ ... ]}  OR  2) [ ... ]
        if isinstance(data, dict) and "accounts" in data:
            selected_accounts = data.get("accounts", [])
        elif isinstance(data, list):
            selected_accounts = data
        else:
            # c√≥ th·ªÉ ng∆∞·ªùi d√πng g·ª≠i {"selected_accounts": [...]}
            if isinstance(data, dict) and "selected_accounts" in data:
                selected_accounts = data.get("selected_accounts", [])
            else:
                selected_accounts = []

        # debug: log payload ng·∫Øn g·ªçn
        log_action(f"‚ÑπÔ∏è /run_tracking payload received (count={len(selected_accounts)}). Preview: {str(selected_accounts)[:800]}")

        if not selected_accounts:
            return jsonify({"result": "‚ö†Ô∏è Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë∆∞·ª£c ch·ªçn"}), 400

        # ƒë·ªçc tracking.json
        tracking_path = os.path.join(os.getcwd(), "tracking.json")
        if not os.path.exists(tracking_path):
            log_action("‚ùå Kh√¥ng t√¨m th·∫•y tracking.json")
            return jsonify({"result": "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file tracking.json"}), 400

        with open(tracking_path, "r", encoding="utf-8") as f:
            tracking_data = json.load(f)

        log_action(f"üöÄ B·∫Øt ƒë·∫ßu tracking cho {len(selected_accounts)} t√†i kho·∫£n...")

        # start thread cho t·ª´ng account (gi·ªØ h√†nh vi staggered 3s nh∆∞ /start)
        for idx, acc in enumerate(selected_accounts):
            # ƒë·∫£m b·∫£o acc l√† dict
            if not isinstance(acc, dict):
                log_action(f"‚ö†Ô∏è B·ªè qua entry kh√¥ng h·ª£p l·ªá t·∫°i index {idx}: {acc}")
                continue

            t = threading.Thread(
                target=run_workflow_for_account,
                args=(acc, tracking_data),
                daemon=True
            )
            t.start()
            log_action(f"üßµ ƒê√£ start thread tracking cho {acc.get('username', 'NoName')} (idx {idx})")
            if idx < len(selected_accounts) - 1:
                time.sleep(3)

        return jsonify({"result": f"‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu tracking cho {len(selected_accounts)} t√†i kho·∫£n (staggered 3s)"}), 200

    except Exception as e:
        log_action(f"‚ùå L·ªói khi ch·∫°y /run_tracking: {e}")
        return jsonify({"result": f"‚ùå L·ªói server khi ch·∫°y tracking: {e}"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)
